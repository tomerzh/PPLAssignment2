(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
      (if (empty? res)
       #f
       (if (equal? (car res) "ok") #t #f))
    #f)
  )
 )

(define error?
  (lambda (res)
    (if (pair? res)
      (if (empty? res)
        #f
        (if (equal? (car res) "Failure") #t #f))
      #f)
  )
 )

(define result?
  (lambda (res)
    (if (or (ok? res) (error? res))
    #t #f)
  )
 )

(define result->val
  (lambda (res)
    if((result? res)
      (cdr res)
      res)
  )
)

(define bind 
  (lambda (f)
    @TODO
  )
)

(define make-dict
  (lambda ()
    @TODO
  )
)

(define dict?
  (lambda (e)
    @TODO
  )
)

(define get
  (lambda (dict k)
    @TODO
  )
)

(define put
  (lambda (dict k v)
    @TODO
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
