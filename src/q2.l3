(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (not (pair? res))
      #f
      (if (empty? res)
        #f
       (if (equal? (car res) "Ok")
        #t 
        #f))
    )
  )
 )

(define error?
  (lambda (res)
    (if (not (pair? res))
      #f
      (if (empty? res)
        #f
       (if (equal? (car res) "Failure")
        #t 
        #f))
    )
  )
 )

(define result?
  (lambda (res)
    (if (or (ok? res) (error? res))
    #t
    #f)
  )
 )

(define result->val
  (lambda (res)
    if((result? res)
      (cdr res)
      (res))
  )
)

(define bind 
  (lambda (f)
    @TODO
  )
)

(define make-dict
  (lambda ()
    '()
  )
)

(define dict?
  (lambda (e)
    (if (empty? e)
      #t
      (if (pair? (car e))
        (dict? (cdr e))
        #f))))


(define get
  (lambda (dict k)
    (if (empty? dict)
      (make-error "Key not found")
      (if (equal? (car (car dict)) k)
        (make-ok (car (cdr dict)))
        (get (cdr dict) k)))))

(define put
  (lambda (dict k v)
    (if (empty? dict)
        dict
        (if (equal? (car (car dict)) k)
            (cons (cons k v) cdr dict) 
            (cons (car dict) (put (cdr dict) k v))))))

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
